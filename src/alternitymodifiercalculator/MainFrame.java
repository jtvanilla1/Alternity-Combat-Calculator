package alternitymodifiercalculator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author josia
 */

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TypeOfAttackGroup = new javax.swing.ButtonGroup();
        TypeOfRWeaponGroup = new javax.swing.ButtonGroup();
        RangeGroup = new javax.swing.ButtonGroup();
        CoverGroup = new javax.swing.ButtonGroup();
        TargetGroupR = new javax.swing.ButtonGroup();
        TargetGroupM = new javax.swing.ButtonGroup();
        LightGroupR = new javax.swing.ButtonGroup();
        LightGroupM = new javax.swing.ButtonGroup();
        Titlelabel = new javax.swing.JLabel();
        authorlabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        PistolButton = new javax.swing.JRadioButton();
        RifleButton = new javax.swing.JRadioButton();
        SMGButton = new javax.swing.JRadioButton();
        DirectButton = new javax.swing.JRadioButton();
        IndirectButton = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        PBRangeButton = new javax.swing.JRadioButton();
        MeleeRangeButton = new javax.swing.JRadioButton();
        ShortRangeButton = new javax.swing.JRadioButton();
        MediumRangeButton = new javax.swing.JRadioButton();
        LongRangeButton = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        RearAttackCheckR = new javax.swing.JCheckBox();
        FlankAttackCheckR = new javax.swing.JCheckBox();
        BalanceCheckR = new javax.swing.JCheckBox();
        HighCheckR = new javax.swing.JCheckBox();
        ProneACheckR = new javax.swing.JCheckBox();
        RunningCheckR = new javax.swing.JCheckBox();
        SprintingCheckR = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        LightCoverButton = new javax.swing.JRadioButton();
        NoCoverButton = new javax.swing.JRadioButton();
        MediumCoverButton = new javax.swing.JRadioButton();
        HeavyCoverButton = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        BrightButtonR = new javax.swing.JRadioButton();
        DimButtonR = new javax.swing.JRadioButton();
        DarkButtonR = new javax.swing.JRadioButton();
        TotalDarkButtonR = new javax.swing.JRadioButton();
        primButton = new javax.swing.JRadioButton();
        ProneDButtonR = new javax.swing.JRadioButton();
        CrouchButtonR = new javax.swing.JRadioButton();
        jTextField5 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        RearAttackCheckM = new javax.swing.JCheckBox();
        FlankAttackCheckM = new javax.swing.JCheckBox();
        BalanceCheckM = new javax.swing.JCheckBox();
        HighCheckM = new javax.swing.JCheckBox();
        ProneACheckM = new javax.swing.JCheckBox();
        RunningCheckM = new javax.swing.JCheckBox();
        SprintingCheckM = new javax.swing.JCheckBox();
        jLabel16 = new javax.swing.JLabel();
        ProneDButtonM = new javax.swing.JRadioButton();
        CrouchDButtonM = new javax.swing.JRadioButton();
        BrightButtonM = new javax.swing.JRadioButton();
        DimButtonM = new javax.swing.JRadioButton();
        DarkButtonM = new javax.swing.JRadioButton();
        TotalDarkButtonM = new javax.swing.JRadioButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        StandingButtonR = new javax.swing.JRadioButton();
        StandingButtonM = new javax.swing.JRadioButton();
        Calculate1 = new javax.swing.JButton();
        Calculate2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Titlelabel.setFont(new java.awt.Font("Franklin Gothic Heavy", 1, 24)); // NOI18N
        Titlelabel.setText("Alternity(TM) Combat Calculator");

        authorlabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        authorlabel.setText("by Josiah Manning");

        jLabel3.setText("Base skill modifier(Attacker):");

        jTextField2.setText("0");
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField2FocusLost(evt);
            }
        });

        jLabel1.setText("Type of Weapon:");

        TypeOfRWeaponGroup.add(PistolButton);
        PistolButton.setSelected(true);
        PistolButton.setText("Pistol");
        PistolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PistolButtonActionPerformed(evt);
            }
        });

        TypeOfRWeaponGroup.add(RifleButton);
        RifleButton.setText("Rifle");
        RifleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RifleButtonActionPerformed(evt);
            }
        });

        TypeOfRWeaponGroup.add(SMGButton);
        SMGButton.setText("SMG");
        SMGButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SMGButtonActionPerformed(evt);
            }
        });

        TypeOfRWeaponGroup.add(DirectButton);
        DirectButton.setText("Direct");
        DirectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectButtonActionPerformed(evt);
            }
        });

        TypeOfRWeaponGroup.add(IndirectButton);
        IndirectButton.setText("Indirect");
        IndirectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IndirectButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Range:");

        RangeGroup.add(PBRangeButton);
        PBRangeButton.setText("PB");
        PBRangeButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PBRangeButtonItemStateChanged(evt);
            }
        });

        RangeGroup.add(MeleeRangeButton);
        MeleeRangeButton.setText("Melee");
        MeleeRangeButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MeleeRangeButtonItemStateChanged(evt);
            }
        });

        RangeGroup.add(ShortRangeButton);
        ShortRangeButton.setSelected(true);
        ShortRangeButton.setText("Short");
        ShortRangeButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ShortRangeButtonItemStateChanged(evt);
            }
        });

        RangeGroup.add(MediumRangeButton);
        MediumRangeButton.setText("Medium");
        MediumRangeButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MediumRangeButtonItemStateChanged(evt);
            }
        });

        RangeGroup.add(LongRangeButton);
        LongRangeButton.setText("Long");
        LongRangeButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LongRangeButtonItemStateChanged(evt);
            }
        });

        jLabel4.setText("Base resistance(Def):");

        jTextField3.setText("0");
        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField3FocusLost(evt);
            }
        });

        jLabel6.setText("Situation-Attacker:");

        RearAttackCheckR.setText("Rear Attack");
        RearAttackCheckR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                RearAttackCheckRItemStateChanged(evt);
            }
        });

        FlankAttackCheckR.setText("Flank Attack");
        FlankAttackCheckR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FlankAttackCheckRItemStateChanged(evt);
            }
        });

        BalanceCheckR.setText("Off-Balance");
        BalanceCheckR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                BalanceCheckRItemStateChanged(evt);
            }
        });

        HighCheckR.setText("High Ground");
        HighCheckR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                HighCheckRItemStateChanged(evt);
            }
        });

        ProneACheckR.setText("Prone");
        ProneACheckR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ProneACheckRItemStateChanged(evt);
            }
        });

        RunningCheckR.setText("Running");
        RunningCheckR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                RunningCheckRItemStateChanged(evt);
            }
        });

        SprintingCheckR.setText("Sprinting");
        SprintingCheckR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SprintingCheckRItemStateChanged(evt);
            }
        });

        jLabel7.setText("Injury Penalty: ");

        jTextField4.setText("0");
        jTextField4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField4FocusLost(evt);
            }
        });

        jLabel8.setText("Target:");

        jLabel9.setText("Cover:");

        CoverGroup.add(LightCoverButton);
        LightCoverButton.setText("Light");
        LightCoverButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LightCoverButtonItemStateChanged(evt);
            }
        });

        CoverGroup.add(NoCoverButton);
        NoCoverButton.setSelected(true);
        NoCoverButton.setText("None");
        NoCoverButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                NoCoverButtonItemStateChanged(evt);
            }
        });

        CoverGroup.add(MediumCoverButton);
        MediumCoverButton.setText("Medium");
        MediumCoverButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MediumCoverButtonItemStateChanged(evt);
            }
        });

        CoverGroup.add(HeavyCoverButton);
        HeavyCoverButton.setText("Heavy");
        HeavyCoverButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                HeavyCoverButtonItemStateChanged(evt);
            }
        });

        jLabel10.setText("Illumination:");

        LightGroupR.add(BrightButtonR);
        BrightButtonR.setSelected(true);
        BrightButtonR.setText("Bright");
        BrightButtonR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                BrightButtonRItemStateChanged(evt);
            }
        });

        LightGroupR.add(DimButtonR);
        DimButtonR.setText("Dim");
        DimButtonR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DimButtonRItemStateChanged(evt);
            }
        });

        LightGroupR.add(DarkButtonR);
        DarkButtonR.setText("Dark");
        DarkButtonR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DarkButtonRItemStateChanged(evt);
            }
        });

        LightGroupR.add(TotalDarkButtonR);
        TotalDarkButtonR.setText("Total Darkness");
        TotalDarkButtonR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                TotalDarkButtonRItemStateChanged(evt);
            }
        });

        TypeOfRWeaponGroup.add(primButton);
        primButton.setText("Bow/Crossbow/Sling");
        primButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                primButtonActionPerformed(evt);
            }
        });

        TargetGroupR.add(ProneDButtonR);
        ProneDButtonR.setText("Prone");
        ProneDButtonR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ProneDButtonRItemStateChanged(evt);
            }
        });

        TargetGroupR.add(CrouchButtonR);
        CrouchButtonR.setText("Sitting/Kneeling");
        CrouchButtonR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CrouchButtonRItemStateChanged(evt);
            }
        });

        jTextField5.setText("0");
        jTextField5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField5FocusLost(evt);
            }
        });

        jLabel12.setText("Injury Penalty: ");

        jTextField6.setText("0");
        jTextField6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField6FocusLost(evt);
            }
        });

        jLabel13.setText("Base skill modifier(Attacker):");

        jTextField7.setText("0");
        jTextField7.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField7FocusLost(evt);
            }
        });

        jLabel14.setText("Base resistance(Def):");

        jLabel15.setText("Situation-Attacker:");

        RearAttackCheckM.setText("Rear Attack");
        RearAttackCheckM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                RearAttackCheckMItemStateChanged(evt);
            }
        });

        FlankAttackCheckM.setText("Flank Attack");
        FlankAttackCheckM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FlankAttackCheckMItemStateChanged(evt);
            }
        });

        BalanceCheckM.setText("Off-Balance");
        BalanceCheckM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                BalanceCheckMItemStateChanged(evt);
            }
        });

        HighCheckM.setText("High Ground");
        HighCheckM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                HighCheckMItemStateChanged(evt);
            }
        });

        ProneACheckM.setText("Prone");
        ProneACheckM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ProneACheckMItemStateChanged(evt);
            }
        });

        RunningCheckM.setText("Running");
        RunningCheckM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                RunningCheckMItemStateChanged(evt);
            }
        });

        SprintingCheckM.setText("Sprinting");
        SprintingCheckM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SprintingCheckMItemStateChanged(evt);
            }
        });

        jLabel16.setText("Target:");

        TargetGroupM.add(ProneDButtonM);
        ProneDButtonM.setText("Prone");
        ProneDButtonM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ProneDButtonMItemStateChanged(evt);
            }
        });

        TargetGroupM.add(CrouchDButtonM);
        CrouchDButtonM.setText("Sitting/Kneeling");
        CrouchDButtonM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CrouchDButtonMItemStateChanged(evt);
            }
        });

        LightGroupM.add(BrightButtonM);
        BrightButtonM.setSelected(true);
        BrightButtonM.setText("Bright");
        BrightButtonM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                BrightButtonMItemStateChanged(evt);
            }
        });

        LightGroupM.add(DimButtonM);
        DimButtonM.setText("Dim");
        DimButtonM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DimButtonMItemStateChanged(evt);
            }
        });

        LightGroupM.add(DarkButtonM);
        DarkButtonM.setText("Dark");
        DarkButtonM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DarkButtonMItemStateChanged(evt);
            }
        });

        LightGroupM.add(TotalDarkButtonM);
        TotalDarkButtonM.setText("Total Darkness");
        TotalDarkButtonM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                TotalDarkButtonMItemStateChanged(evt);
            }
        });

        jLabel17.setText("Illumination:");

        jLabel18.setText("Other:");

        jTextField8.setText("0");
        jTextField8.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField8FocusLost(evt);
            }
        });

        jLabel21.setText("TOTAL:");

        jTextField11.setText("0");

        jTextField12.setText("0");

        jLabel22.setText("Other:");

        jTextField13.setText("0");
        jTextField13.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField13FocusLost(evt);
            }
        });

        jLabel23.setText("TOTAL:");

        TargetGroupR.add(StandingButtonR);
        StandingButtonR.setSelected(true);
        StandingButtonR.setText("Standing");
        StandingButtonR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                StandingButtonRItemStateChanged(evt);
            }
        });

        TargetGroupM.add(StandingButtonM);
        StandingButtonM.setSelected(true);
        StandingButtonM.setText("Standing");
        StandingButtonM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                StandingButtonMItemStateChanged(evt);
            }
        });

        Calculate1.setText("Calculate");
        Calculate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Calculate1ActionPerformed(evt);
            }
        });

        Calculate2.setText("Calculate");
        Calculate2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Calculate2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Ranged Attack");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Melee Attack");

        jLabel19.setText("roll:");

        jLabel20.setText("roll:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(authorlabel)
                        .addGap(238, 238, 238))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Titlelabel)
                        .addGap(100, 100, 100))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SprintingCheckR)
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RearAttackCheckR)
                                    .addComponent(HighCheckR))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FlankAttackCheckR)
                                    .addComponent(ProneACheckR))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RunningCheckR)
                                    .addComponent(BalanceCheckR)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(PBRangeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MeleeRangeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ShortRangeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MediumRangeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LongRangeButton))
                            .addComponent(jLabel6)
                            .addComponent(jLabel9)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(NoCoverButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LightCoverButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MediumCoverButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HeavyCoverButton))
                            .addComponent(jLabel10)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BrightButtonR)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DimButtonR)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DarkButtonR)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TotalDarkButtonR))
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(PistolButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RifleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SMGButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(primButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DirectButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(IndirectButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(StandingButtonR)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ProneDButtonR)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CrouchButtonR))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Calculate1)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel18)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel21)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel19)))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel12)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField5)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel22)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel23)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(Calculate2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel20))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RearAttackCheckM)
                                    .addComponent(HighCheckM)
                                    .addComponent(SprintingCheckM)
                                    .addComponent(jLabel16))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ProneACheckM)
                                    .addComponent(FlankAttackCheckM))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RunningCheckM)
                                    .addComponent(BalanceCheckM)))
                            .addComponent(jLabel17)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BrightButtonM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DimButtonM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DarkButtonM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TotalDarkButtonM))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(StandingButtonM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ProneDButtonM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CrouchDButtonM))
                            .addComponent(jLabel15))
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(214, 214, 214)
                        .addComponent(jLabel11)
                        .addGap(172, 172, 172))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Titlelabel)
                .addGap(1, 1, 1)
                .addComponent(authorlabel)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RearAttackCheckM)
                            .addComponent(FlankAttackCheckM)
                            .addComponent(BalanceCheckM))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(HighCheckM)
                            .addComponent(ProneACheckM)
                            .addComponent(RunningCheckM))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SprintingCheckM)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProneDButtonM)
                            .addComponent(CrouchDButtonM)
                            .addComponent(StandingButtonM))
                        .addGap(52, 52, 52)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BrightButtonM)
                            .addComponent(DimButtonM)
                            .addComponent(DarkButtonM)
                            .addComponent(TotalDarkButtonM))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(Calculate2)
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel23)
                                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel22)
                                .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PistolButton)
                            .addComponent(RifleButton)
                            .addComponent(SMGButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DirectButton)
                            .addComponent(IndirectButton)
                            .addComponent(primButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PBRangeButton)
                            .addComponent(MeleeRangeButton)
                            .addComponent(ShortRangeButton)
                            .addComponent(MediumRangeButton)
                            .addComponent(LongRangeButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(2, 2, 2)
                                .addComponent(RearAttackCheckR)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HighCheckR))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BalanceCheckR)
                                        .addGap(24, 24, 24))
                                    .addComponent(RunningCheckR))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(FlankAttackCheckR)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ProneACheckR)
                                    .addGap(1, 1, 1))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SprintingCheckR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProneDButtonR)
                            .addComponent(CrouchButtonR)
                            .addComponent(StandingButtonR))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NoCoverButton)
                            .addComponent(LightCoverButton)
                            .addComponent(MediumCoverButton)
                            .addComponent(HeavyCoverButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BrightButtonR)
                            .addComponent(DimButtonR)
                            .addComponent(DarkButtonR)
                            .addComponent(TotalDarkButtonR))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Calculate1)
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))))
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Calculate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Calculate1ActionPerformed
        int numTotal = ConstantCodes.TotalRangedModifier + ConstantCodes.TotalOtherModifiersR;
        String total = Integer.toString(numTotal);
        jTextField11.setText(total);
        
        String posNeg, numDie, die, sitDie;
        if(numTotal >= 0)
            posNeg = " + ";
        else
            posNeg = " - ";
        
        if(Math.abs(numTotal) >=5)
            numDie = Integer.toString(Math.abs(numTotal) - 4);
        else
            numDie = "1";
        
        switch(Math.abs(numTotal)){
            case 0:
                die = "d0";
                break;
            case 1:
                die = "d4";
                break;
            case 2:
                die = "d6";
                break;
            case 3:
                die = "d8";
                break;
            case 4:
                die = "d12";
                break;
            default:
                die = "d20";
                break;
        }
        
        sitDie = posNeg+numDie+die;
        jLabel19.setText("roll: d20"+sitDie);
        
        
    }//GEN-LAST:event_Calculate1ActionPerformed

    private void Calculate2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Calculate2ActionPerformed
        int numTotal = ConstantCodes.TotalMeleeModifier + ConstantCodes.TotalOtherModifiersM;
        String total = Integer.toString(numTotal);
        jTextField12.setText(total);
        
        String posNeg, numDie, die, sitDie;
        if(numTotal >= 0)
            posNeg = " + ";
        else
            posNeg = " - ";
        
        if(Math.abs(numTotal) >=5)
            numDie = Integer.toString(Math.abs(numTotal) - 4);
        else
            numDie = "1";
        
        switch(Math.abs(numTotal)){
            case 0:
                die = "d0";
                break;
            case 1:
                die = "d4";
                break;
            case 2:
                die = "d6";
                break;
            case 3:
                die = "d8";
                break;
            case 4:
                die = "d12";
                break;
            default:
                die = "d20";
                break;
        }
        
        sitDie = posNeg+numDie+die;
        jLabel20.setText("roll: d20"+sitDie);
      
    }//GEN-LAST:event_Calculate2ActionPerformed

    private void RearAttackCheckRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_RearAttackCheckRItemStateChanged
        if(RearAttackCheckR.isSelected()){
            int mod = -3;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = 3;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_RearAttackCheckRItemStateChanged

    private void FlankAttackCheckRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FlankAttackCheckRItemStateChanged
        if(FlankAttackCheckR.isSelected()){
            int mod = -1;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = 1;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_FlankAttackCheckRItemStateChanged

    private void BalanceCheckRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_BalanceCheckRItemStateChanged
        if(BalanceCheckR.isSelected()){
            int mod = 2;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = -2;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_BalanceCheckRItemStateChanged

    private void HighCheckRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_HighCheckRItemStateChanged
        if(HighCheckR.isSelected()){
            int mod = -2;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = 2;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_HighCheckRItemStateChanged

    private void ProneACheckRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ProneACheckRItemStateChanged
        if(ProneACheckR.isSelected()){
            int mod = -2;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = 2;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_ProneACheckRItemStateChanged

    private void RunningCheckRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_RunningCheckRItemStateChanged
        if(RunningCheckR.isSelected()){
            int mod = 2;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = -2;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_RunningCheckRItemStateChanged

    private void SprintingCheckRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SprintingCheckRItemStateChanged
        if(SprintingCheckR.isSelected()){
            int mod = 3;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = -3;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_SprintingCheckRItemStateChanged

    private void StandingButtonRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_StandingButtonRItemStateChanged
        if(StandingButtonR.isSelected()){
            int mod = 0;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = 0;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_StandingButtonRItemStateChanged

    private void ProneDButtonRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ProneDButtonRItemStateChanged
        if(ProneDButtonR.isSelected()){
            int mod = 2;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = -2;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_ProneDButtonRItemStateChanged

    private void CrouchButtonRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CrouchButtonRItemStateChanged
        if(CrouchButtonR.isSelected()){
            int mod = 1;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = -1;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_CrouchButtonRItemStateChanged

    private void NoCoverButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_NoCoverButtonItemStateChanged
        if(NoCoverButton.isSelected()){
            int mod = 0;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = 0;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_NoCoverButtonItemStateChanged

    private void LightCoverButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LightCoverButtonItemStateChanged
        if(LightCoverButton.isSelected()){
            int mod = 1;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = -1;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_LightCoverButtonItemStateChanged

    private void MediumCoverButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MediumCoverButtonItemStateChanged
        if(MediumCoverButton.isSelected()){
            int mod = 2;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = -2;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_MediumCoverButtonItemStateChanged

    private void HeavyCoverButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_HeavyCoverButtonItemStateChanged
        if(HeavyCoverButton.isSelected()){
            int mod = 3;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = -3;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_HeavyCoverButtonItemStateChanged

    private void BrightButtonRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_BrightButtonRItemStateChanged
        if(BrightButtonR.isSelected()){
            int mod = 0;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = 0;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_BrightButtonRItemStateChanged

    private void DimButtonRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DimButtonRItemStateChanged
        if(DimButtonR.isSelected()){
            int mod = 1;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = -1;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_DimButtonRItemStateChanged

    private void DarkButtonRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DarkButtonRItemStateChanged
        if(DarkButtonR.isSelected()){
            int mod = 2;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = -2;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_DarkButtonRItemStateChanged

    private void TotalDarkButtonRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_TotalDarkButtonRItemStateChanged
        if(TotalDarkButtonR.isSelected()){
            int mod = 3;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else{
            int mod = -3;
            ConstantCodes.TotalRangedModifier += mod;
        }
    }//GEN-LAST:event_TotalDarkButtonRItemStateChanged

    private void RearAttackCheckMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_RearAttackCheckMItemStateChanged
        if(RearAttackCheckM.isSelected()){
            int mod = -3;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = 3;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_RearAttackCheckMItemStateChanged

    private void FlankAttackCheckMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FlankAttackCheckMItemStateChanged
        if(FlankAttackCheckM.isSelected()){
            int mod = -1;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = 1;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_FlankAttackCheckMItemStateChanged

    private void BalanceCheckMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_BalanceCheckMItemStateChanged
        if(BalanceCheckM.isSelected()){
            int mod = 2;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = -2;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_BalanceCheckMItemStateChanged

    private void HighCheckMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_HighCheckMItemStateChanged
        if(HighCheckM.isSelected()){
            int mod = -2;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = +2;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_HighCheckMItemStateChanged

    private void ProneACheckMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ProneACheckMItemStateChanged
        if(ProneACheckM.isSelected()){
            int mod = 2;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = -2;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_ProneACheckMItemStateChanged

    private void RunningCheckMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_RunningCheckMItemStateChanged
        if(RunningCheckM.isSelected()){
            int mod = 2;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = -2;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_RunningCheckMItemStateChanged

    private void SprintingCheckMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SprintingCheckMItemStateChanged
        if(SprintingCheckM.isSelected()){
            int mod = 3;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = -3;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_SprintingCheckMItemStateChanged

    private void StandingButtonMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_StandingButtonMItemStateChanged
        if(StandingButtonM.isSelected()){
            int mod = 0;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = 0;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_StandingButtonMItemStateChanged

    private void ProneDButtonMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ProneDButtonMItemStateChanged
        if(ProneDButtonM.isSelected()){
            int mod = -2;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = 2;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_ProneDButtonMItemStateChanged

    private void CrouchDButtonMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CrouchDButtonMItemStateChanged
        if(CrouchDButtonM.isSelected()){
            int mod = -1;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = 1;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_CrouchDButtonMItemStateChanged

    private void BrightButtonMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_BrightButtonMItemStateChanged
        if(BrightButtonM.isSelected()){
            int mod = 0;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = 0;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_BrightButtonMItemStateChanged

    private void DimButtonMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DimButtonMItemStateChanged
        if(DimButtonM.isSelected()){
            int mod = 1;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = -1;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_DimButtonMItemStateChanged

    private void DarkButtonMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DarkButtonMItemStateChanged
        if(DarkButtonM.isSelected()){
            int mod = 2;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = -2;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_DarkButtonMItemStateChanged

    private void TotalDarkButtonMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_TotalDarkButtonMItemStateChanged
        if(TotalDarkButtonM.isSelected()){
            int mod = 3;
            ConstantCodes.TotalMeleeModifier += mod;
        }
        else{
            int mod = -3;
            ConstantCodes.TotalMeleeModifier += mod;
        }
    }//GEN-LAST:event_TotalDarkButtonMItemStateChanged

    private void PistolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PistolButtonActionPerformed
        ConstantCodes.WeaponChoice = 1;
        ShortRangeButton.doClick();
    }//GEN-LAST:event_PistolButtonActionPerformed

    private void RifleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RifleButtonActionPerformed
        ConstantCodes.WeaponChoice = 2;
        ShortRangeButton.doClick();
    }//GEN-LAST:event_RifleButtonActionPerformed

    private void SMGButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SMGButtonActionPerformed
        ConstantCodes.WeaponChoice = 3;
        ShortRangeButton.doClick();
    }//GEN-LAST:event_SMGButtonActionPerformed

    private void primButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primButtonActionPerformed
        ConstantCodes.WeaponChoice = 4;
        ShortRangeButton.doClick();
    }//GEN-LAST:event_primButtonActionPerformed

    private void DirectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirectButtonActionPerformed
        ConstantCodes.WeaponChoice = 5;
        ShortRangeButton.doClick();
    }//GEN-LAST:event_DirectButtonActionPerformed

    private void IndirectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IndirectButtonActionPerformed
        ConstantCodes.WeaponChoice = 6;
        ShortRangeButton.doClick();
    }//GEN-LAST:event_IndirectButtonActionPerformed

    private void PBRangeButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PBRangeButtonItemStateChanged
        if(PBRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 1 
                    || ConstantCodes.WeaponChoice == 2
                    || ConstantCodes.WeaponChoice == 3
                    || ConstantCodes.WeaponChoice == 5)){
            int mod = -3;
            ConstantCodes.TotalRangedModifier += mod;
        }
        else if (PBRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 4
                    || ConstantCodes.WeaponChoice == 6)){
            int mod = 1;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag1 = true;
        }
        else{
            if (ConstantCodes.flag1){
                int mod = -1;
                ConstantCodes.TotalRangedModifier += mod;
            }
            else{
                int mod = 3;
                ConstantCodes.TotalRangedModifier += mod;
            }
            ConstantCodes.flag1 = false;
            ConstantCodes.flag2 = false;
            ConstantCodes.flag3 = false;
            ConstantCodes.flag4 = false;
        }
    }//GEN-LAST:event_PBRangeButtonItemStateChanged

    private void MeleeRangeButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MeleeRangeButtonItemStateChanged
        if(MeleeRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 1 
                    || ConstantCodes.WeaponChoice == 3)){
            int mod = -1;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag1 = true;
        }
        else if (MeleeRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 2
                    || ConstantCodes.WeaponChoice == 4
                    || ConstantCodes.WeaponChoice == 5)){
            int mod = 1;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag2 = true;
        }
        else if (MeleeRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 6)){
            int mod = 4;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag3 = true;
        }
        else{
            if (ConstantCodes.flag1){
                int mod = 1;
                ConstantCodes.TotalRangedModifier += mod;
            }
            else if (ConstantCodes.flag2){
                int mod = -1;
                ConstantCodes.TotalRangedModifier += mod;
            }
            else if (ConstantCodes.flag3){
                int mod = -4;
                ConstantCodes.TotalRangedModifier += mod;
            }
            ConstantCodes.flag1 = false;
            ConstantCodes.flag2 = false;
            ConstantCodes.flag3 = false;
            ConstantCodes.flag4 = false;
        }
    }//GEN-LAST:event_MeleeRangeButtonItemStateChanged

    private void ShortRangeButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ShortRangeButtonItemStateChanged
        if(ShortRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 6)){
            int mod = 2;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag1 = true;
        }
        else if (ShortRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 1
                    || ConstantCodes.WeaponChoice == 2
                    || ConstantCodes.WeaponChoice == 3
                    || ConstantCodes.WeaponChoice == 4
                    || ConstantCodes.WeaponChoice == 5)){
            int mod = -1;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag2 = true;
        }
        else{
            if (ConstantCodes.flag1){
                int mod = -2;
                ConstantCodes.TotalRangedModifier += mod;
            }
            else if (ConstantCodes.flag2){
                int mod = 1;
                ConstantCodes.TotalRangedModifier += mod;
            }
            ConstantCodes.flag1 = false;
            ConstantCodes.flag2 = false;
            ConstantCodes.flag3 = false;
            ConstantCodes.flag4 = false;
        }
    }//GEN-LAST:event_ShortRangeButtonItemStateChanged

    private void MediumRangeButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MediumRangeButtonItemStateChanged
        if(MediumRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 1
                    || ConstantCodes.WeaponChoice == 3
                    || ConstantCodes.WeaponChoice == 4)){
            int mod = 1;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag1 = true;
        }
        else if (MediumRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 2
                    || ConstantCodes.WeaponChoice == 5)){
            int mod = 0;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag2 = true;
        }
        else if (MediumRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 6)){
            int mod = -2;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag3 = true;
        }
        else{
            if (ConstantCodes.flag1){
                int mod = -1;
                ConstantCodes.TotalRangedModifier += mod;
            }
            else if (ConstantCodes.flag2){
                int mod = 0;
                ConstantCodes.TotalRangedModifier += mod;
            }
            else if (ConstantCodes.flag3){
                int mod = 2;
                ConstantCodes.TotalRangedModifier += mod;
            }
            ConstantCodes.flag1 = false;
            ConstantCodes.flag2 = false;
            ConstantCodes.flag3 = false;
            ConstantCodes.flag4 = false;
        }
    }//GEN-LAST:event_MediumRangeButtonItemStateChanged

    private void LongRangeButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LongRangeButtonItemStateChanged
        if(LongRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 2
                    || ConstantCodes.WeaponChoice == 5)){
            int mod = 1;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag1 = true;
        }
        else if (LongRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 1
                    || ConstantCodes.WeaponChoice == 3)){
            int mod = 3;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag2 = true;
        }
        else if (LongRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 4)){
            int mod = 2;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag3 = true;
        }
        else if (LongRangeButton.isSelected()
                && (ConstantCodes.WeaponChoice == 6)){
            int mod = 0;
            ConstantCodes.TotalRangedModifier += mod;
            ConstantCodes.flag4 = true;
        }
        else{
            if (ConstantCodes.flag1){
                int mod = -1;
                ConstantCodes.TotalRangedModifier += mod;
            }
            else if (ConstantCodes.flag2){
                int mod = -3;
                ConstantCodes.TotalRangedModifier += mod;
            }
            else if (ConstantCodes.flag3){
                int mod = -2;
                ConstantCodes.TotalRangedModifier += mod;
            }
            else if (ConstantCodes.flag4){
                int mod = 0;
                ConstantCodes.TotalRangedModifier += mod;
            }
            ConstantCodes.flag1 = false;
            ConstantCodes.flag2 = false;
            ConstantCodes.flag3 = false;
            ConstantCodes.flag4 = false;
        }
    }//GEN-LAST:event_LongRangeButtonItemStateChanged

    private void jTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusLost
        if(!jTextField2.equals(""))
            ConstantCodes.TotalOtherModifiersR += Integer.parseInt(jTextField2.getText());
        else
            jTextField2.setText("0");
    }//GEN-LAST:event_jTextField2FocusLost

    private void jTextField3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField3FocusLost
        if(!jTextField3.equals(""))
            ConstantCodes.TotalOtherModifiersR += Integer.parseInt(jTextField3.getText());
        else
            jTextField3.setText("0");
    }//GEN-LAST:event_jTextField3FocusLost

    private void jTextField4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField4FocusLost
        if(!jTextField4.equals(""))
            ConstantCodes.TotalOtherModifiersR += Integer.parseInt(jTextField4.getText());
        else
            jTextField4.setText("0");
    }//GEN-LAST:event_jTextField4FocusLost

    private void jTextField7FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField7FocusLost
        if(!jTextField7.equals(""))
            ConstantCodes.TotalOtherModifiersM += Integer.parseInt(jTextField7.getText());
        else
            jTextField7.setText("0");
    }//GEN-LAST:event_jTextField7FocusLost

    private void jTextField5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField5FocusLost
        if(!jTextField5.equals(""))
            ConstantCodes.TotalOtherModifiersM += Integer.parseInt(jTextField5.getText());
        else
            jTextField5.setText("0");
    }//GEN-LAST:event_jTextField5FocusLost

    private void jTextField6FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField6FocusLost
        if(!jTextField6.equals(""))
            ConstantCodes.TotalOtherModifiersM += Integer.parseInt(jTextField6.getText());
        else
            jTextField6.setText("0");
    }//GEN-LAST:event_jTextField6FocusLost

    private void jTextField8FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField8FocusLost
        if(!jTextField8.equals(""))
            ConstantCodes.TotalOtherModifiersR += Integer.parseInt(jTextField7.getText());
        else
            jTextField8.setText("0");
    }//GEN-LAST:event_jTextField8FocusLost

    private void jTextField13FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField13FocusLost
        if(!jTextField13.equals(""))
            ConstantCodes.TotalOtherModifiersM += Integer.parseInt(jTextField13.getText());
        else
            jTextField13.setText("0");
    }//GEN-LAST:event_jTextField13FocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox BalanceCheckM;
    private javax.swing.JCheckBox BalanceCheckR;
    private javax.swing.JRadioButton BrightButtonM;
    private javax.swing.JRadioButton BrightButtonR;
    private javax.swing.JButton Calculate1;
    private javax.swing.JButton Calculate2;
    private javax.swing.ButtonGroup CoverGroup;
    private javax.swing.JRadioButton CrouchButtonR;
    private javax.swing.JRadioButton CrouchDButtonM;
    private javax.swing.JRadioButton DarkButtonM;
    private javax.swing.JRadioButton DarkButtonR;
    private javax.swing.JRadioButton DimButtonM;
    private javax.swing.JRadioButton DimButtonR;
    private javax.swing.JRadioButton DirectButton;
    private javax.swing.JCheckBox FlankAttackCheckM;
    private javax.swing.JCheckBox FlankAttackCheckR;
    private javax.swing.JRadioButton HeavyCoverButton;
    private javax.swing.JCheckBox HighCheckM;
    private javax.swing.JCheckBox HighCheckR;
    private javax.swing.JRadioButton IndirectButton;
    private javax.swing.JRadioButton LightCoverButton;
    private javax.swing.ButtonGroup LightGroupM;
    private javax.swing.ButtonGroup LightGroupR;
    private javax.swing.JRadioButton LongRangeButton;
    private javax.swing.JRadioButton MediumCoverButton;
    private javax.swing.JRadioButton MediumRangeButton;
    private javax.swing.JRadioButton MeleeRangeButton;
    private javax.swing.JRadioButton NoCoverButton;
    private javax.swing.JRadioButton PBRangeButton;
    private javax.swing.JRadioButton PistolButton;
    private javax.swing.JCheckBox ProneACheckM;
    private javax.swing.JCheckBox ProneACheckR;
    private javax.swing.JRadioButton ProneDButtonM;
    private javax.swing.JRadioButton ProneDButtonR;
    private javax.swing.ButtonGroup RangeGroup;
    private javax.swing.JCheckBox RearAttackCheckM;
    private javax.swing.JCheckBox RearAttackCheckR;
    private javax.swing.JRadioButton RifleButton;
    private javax.swing.JCheckBox RunningCheckM;
    private javax.swing.JCheckBox RunningCheckR;
    private javax.swing.JRadioButton SMGButton;
    private javax.swing.JRadioButton ShortRangeButton;
    private javax.swing.JCheckBox SprintingCheckM;
    private javax.swing.JCheckBox SprintingCheckR;
    private javax.swing.JRadioButton StandingButtonM;
    private javax.swing.JRadioButton StandingButtonR;
    private javax.swing.ButtonGroup TargetGroupM;
    private javax.swing.ButtonGroup TargetGroupR;
    private javax.swing.JLabel Titlelabel;
    private javax.swing.JRadioButton TotalDarkButtonM;
    private javax.swing.JRadioButton TotalDarkButtonR;
    private javax.swing.ButtonGroup TypeOfAttackGroup;
    private javax.swing.ButtonGroup TypeOfRWeaponGroup;
    private javax.swing.JLabel authorlabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JRadioButton primButton;
    // End of variables declaration//GEN-END:variables
}
